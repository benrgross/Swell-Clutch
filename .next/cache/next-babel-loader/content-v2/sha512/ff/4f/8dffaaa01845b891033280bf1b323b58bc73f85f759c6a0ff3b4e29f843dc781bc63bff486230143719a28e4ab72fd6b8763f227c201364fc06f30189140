{"ast":null,"code":"import { withSuperJSONPage as _withSuperJSONPage } from \"babel-plugin-superjson-next/tools\";\nimport { withSuperJSONProps as _withSuperJSONProps } from \"babel-plugin-superjson-next/tools\";\nvar _jsxFileName = \"/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/pages/SavedSwells.js\";\nimport React from \"react\";\nimport { GetServerSideProps } from \"next\";\nimport { getSession, useSession } from \"next-auth/client\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport DisplaySpot from \"../components/DisplaySpot\";\nimport SavedSwellCard from \"../components/SavedSwellCard\";\nimport prisma from \"../lib/prisma\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SavedSwells(props) {\n  const [state, dispatch] = useStoreContext();\n  const swells = props.swellArr[0];\n  console.log(swells);\n  const spots = [];\n  swells.forEach(swell => spots.push(swell.spotName));\n  console.log(spots);\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  const uniqueSpots = spots.filter(onlyUnique);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"savedCont\",\n    children: state.displaySpot ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(DisplaySpot, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: swells.map(swell => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(SavedSwellCard, {\n          id: swell.id,\n          dateStr: swell.dateStr,\n          spotName: swell.spotName,\n          createdAt: swell.dateStr,\n          report: swell.report,\n          swell1: swell.swell1,\n          swell2: swell.swell2,\n          swell3: swell.swell3,\n          swell4: swell.swell4,\n          swell5: swell.swell5,\n          swell6: swell.swell6,\n          tide: swell.tide,\n          wind: swell.wind,\n          notes: swell.notes\n        }, swell.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this)\n      }, void 0, false))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\nexport const getServerSideProps = _withSuperJSONProps(async function getServerSideProps(context) {\n  const session = await getSession(context);\n  const swells = await prisma.swell.findMany({\n    where: {\n      id: {\n        equals: session.user.id,\n        mode: \"insensitive\"\n      }\n    }\n  });\n  const swellObj = {\n    swellArr: []\n  };\n  swells.map(swell => {\n    swell.createdAt.toISOString(), swell.updatedAt.toISOString();\n  });\n  swellObj.swellArr.push(swells);\n  return {\n    props: swellObj\n  };\n}, [\"superJsonSkipped\"]);\nexport default _withSuperJSONPage(SavedSwells);","map":{"version":3,"sources":["/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/pages/SavedSwells.js"],"names":["React","GetServerSideProps","getSession","useSession","useStoreContext","DisplaySpot","SavedSwellCard","prisma","SavedSwells","props","state","dispatch","swells","swellArr","console","log","spots","forEach","swell","push","spotName","onlyUnique","value","index","self","indexOf","uniqueSpots","filter","displaySpot","map","id","dateStr","report","swell1","swell2","swell3","swell4","swell5","swell6","tide","wind","notes","getServerSideProps","context","session","findMany","where","equals","user","mode","swellObj","createdAt","toISOString","updatedAt"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,kBAAT,QAAmC,MAAnC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,kBAAvC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,MAAP,MAAmB,eAAnB;;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,eAAe,EAAzC;AACA,QAAMQ,MAAM,GAAGH,KAAK,CAACI,QAAN,CAAe,CAAf,CAAf;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,QAAMI,KAAK,GAAG,EAAd;AAEAJ,EAAAA,MAAM,CAACK,OAAP,CAAgBC,KAAD,IAAWF,KAAK,CAACG,IAAN,CAAWD,KAAK,CAACE,QAAjB,CAA1B;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;;AAEA,WAASK,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACtC,WAAOA,IAAI,CAACC,OAAL,CAAaH,KAAb,MAAwBC,KAA/B;AACD;;AAED,QAAMG,WAAW,GAAGV,KAAK,CAACW,MAAN,CAAaN,UAAb,CAApB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACGX,KAAK,CAACkB,WAAN,gBACC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADD,gBAKC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBACGhB,MAAM,CAACiB,GAAP,CAAYX,KAAD,iBACV;AAAA,+BAEE,QAAC,cAAD;AAEE,UAAA,EAAE,EAAEA,KAAK,CAACY,EAFZ;AAGE,UAAA,OAAO,EAAEZ,KAAK,CAACa,OAHjB;AAIE,UAAA,QAAQ,EAAEb,KAAK,CAACE,QAJlB;AAKE,UAAA,SAAS,EAAEF,KAAK,CAACa,OALnB;AAME,UAAA,MAAM,EAAEb,KAAK,CAACc,MANhB;AAOE,UAAA,MAAM,EAAEd,KAAK,CAACe,MAPhB;AAQE,UAAA,MAAM,EAAEf,KAAK,CAACgB,MARhB;AASE,UAAA,MAAM,EAAEhB,KAAK,CAACiB,MAThB;AAUE,UAAA,MAAM,EAAEjB,KAAK,CAACkB,MAVhB;AAWE,UAAA,MAAM,EAAElB,KAAK,CAACmB,MAXhB;AAYE,UAAA,MAAM,EAAEnB,KAAK,CAACoB,MAZhB;AAaE,UAAA,IAAI,EAAEpB,KAAK,CAACqB,IAbd;AAcE,UAAA,IAAI,EAAErB,KAAK,CAACsB,IAdd;AAeE,UAAA,KAAK,EAAEtB,KAAK,CAACuB;AAff,WACOvB,KAAK,CAACY,EADb;AAAA;AAAA;AAAA;AAAA;AAFF,uBADD;AADH;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD;;AAED,aAAsBY,kBAAtB,sCAAsBA,kBAAtB,CAAyCC,OAAzC,EAAkD;AAChD,QAAMC,OAAO,GAAG,MAAM1C,UAAU,CAACyC,OAAD,CAAhC;AAEA,QAAM/B,MAAM,GAAG,MAAML,MAAM,CAACW,KAAP,CAAa2B,QAAb,CAAsB;AACzCC,IAAAA,KAAK,EAAE;AACLhB,MAAAA,EAAE,EAAE;AAAEiB,QAAAA,MAAM,EAAEH,OAAO,CAACI,IAAR,CAAalB,EAAvB;AAA2BmB,QAAAA,IAAI,EAAE;AAAjC;AADC;AADkC,GAAtB,CAArB;AAMA,QAAMC,QAAQ,GAAG;AACfrC,IAAAA,QAAQ,EAAE;AADK,GAAjB;AAIAD,EAAAA,MAAM,CAACiB,GAAP,CAAYX,KAAD,IAAW;AACpBA,IAAAA,KAAK,CAACiC,SAAN,CAAgBC,WAAhB,IAA+BlC,KAAK,CAACmC,SAAN,CAAgBD,WAAhB,EAA/B;AACD,GAFD;AAIAF,EAAAA,QAAQ,CAACrC,QAAT,CAAkBM,IAAlB,CAAuBP,MAAvB;AAEA,SAAO;AACLH,IAAAA,KAAK,EAAEyC;AADF,GAAP;AAGD,CAtBD;AAwBA,kCAAe1C,WAAf","sourcesContent":["import React from \"react\";\n\nimport { GetServerSideProps } from \"next\";\nimport { getSession, useSession } from \"next-auth/client\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport DisplaySpot from \"../components/DisplaySpot\";\nimport SavedSwellCard from \"../components/SavedSwellCard\";\nimport prisma from \"../lib/prisma\";\n\nfunction SavedSwells(props) {\n  const [state, dispatch] = useStoreContext();\n  const swells = props.swellArr[0];\n\n  console.log(swells);\n  const spots = [];\n\n  swells.forEach((swell) => spots.push(swell.spotName));\n  console.log(spots);\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  const uniqueSpots = spots.filter(onlyUnique);\n\n  return (\n    <div className=\"savedCont\">\n      {state.displaySpot ? (\n        <div className=\"row\">\n          <DisplaySpot />\n        </div>\n      ) : (\n        <div className=\"row\">\n          {swells.map((swell) => (\n            <>\n              {/* <DisplaySpot /> */}\n              <SavedSwellCard\n                key={swell.id}\n                id={swell.id}\n                dateStr={swell.dateStr}\n                spotName={swell.spotName}\n                createdAt={swell.dateStr}\n                report={swell.report}\n                swell1={swell.swell1}\n                swell2={swell.swell2}\n                swell3={swell.swell3}\n                swell4={swell.swell4}\n                swell5={swell.swell5}\n                swell6={swell.swell6}\n                tide={swell.tide}\n                wind={swell.wind}\n                notes={swell.notes}\n              />\n            </>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  const session = await getSession(context);\n\n  const swells = await prisma.swell.findMany({\n    where: {\n      id: { equals: session.user.id, mode: \"insensitive\" },\n    },\n  });\n\n  const swellObj = {\n    swellArr: [],\n  };\n\n  swells.map((swell) => {\n    swell.createdAt.toISOString(), swell.updatedAt.toISOString();\n  });\n\n  swellObj.swellArr.push(swells);\n\n  return {\n    props: swellObj,\n  };\n}\n\nexport default SavedSwells;\n"]},"metadata":{},"sourceType":"module"}