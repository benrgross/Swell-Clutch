{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/components/SearchResults.js\";\nimport React from \"react\";\nimport { server } from \"../config\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport axios from \"axios\";\nimport { SimpleConsoleLogger, UsingJoinColumnIsNotAllowedError } from \"typeorm\";\n\nfunction SearchResults() {\n  const [state, dispatch] = useStoreContext();\n\n  const getSwell = async e => {\n    const id = {\n      spotId: e.target.getAttribute(\"data-id\")\n    }; //make request for surfline\n\n    const swell = await axios.post(`${server}/api/swells`, id);\n    const tide = await axios.post(`${server}/api/tides`, id);\n    const wind = await axios.post(`${server}/api/winds`, id); // slice data for only today\n    // map unix time to hours\n\n    const tides = tide.data.data.tides.slice(0, 25).map(function (tides) {\n      let date = new Date(tides.timestamp * 1000);\n      tides.timestamp = date.getHours();\n      return tides;\n    });\n    const swells = swell.data.data.wave.slice(0, 17).map(function (wave) {\n      let date = new Date(wave.timestamp * 1000);\n      wave.timestamp = date.getHours();\n      return wave;\n    });\n    const winds = wind.data.data.wind.slice(0, 17).map(function (wind) {\n      let date = new Date(wind.timestamp * 1000);\n      wind.timestamp = date.getHours();\n      return wind;\n    });\n    console.log(\"winds\", winds);\n    console.log(\"swells\", swells);\n    console.log(\"tides\", tides); // get the users time\n\n    let userTime = new Date().getHours();\n    let swellObject = {\n      swells: [],\n      surf: {},\n      currentWind: {},\n      currentTide: {\n        height: 0,\n        status: \"null\"\n      }\n    };\n\n    for (let i = 0; i < swells.length; i++) {\n      if (userTime === swells[i].timestamp) {\n        swellObject.swells = swells[i].swells.filter(swell => swell.height !== 0);\n        swellObject.surf = swells[i].surf;\n      } else if (userTime > 16) {\n        swellObject.swells = swells[16].swells.filter(swell => swell.height !== 0);\n        swellObject.surf = swells[16].surf;\n      } else if (userTime < 3) {\n        swellObject.swells = swells[0].swells.filter(swell => swell.height !== 0);\n        swellObject.surf = swells[0].surf;\n      }\n\n      swellObject.swells.sort((a, b) => b.height - a.height);\n    }\n\n    for (let i = 0; i < winds.length; i++) {\n      if (userTime === winds[i].timestamp) {\n        swellObject.currentWind = winds[i];\n      } else if (userTime > 16) {\n        swellObject.currentWind = winds[16];\n        swellObject.currentWind = winds[16];\n      } else if (userTime < 3) {\n        swellObject.currentWind = winds[0];\n      }\n    }\n\n    let {\n      currentTide\n    } = swellObject; // FIX TIDE BUG TO REFLECT HIGH OR LOW TIDE WHEN TIMESTAMPS MATCH\n\n    for (let i = 0; i < tides.length; i++) {\n      if (userTime === tides[i].timestamp) {\n        currentTide.height = tides[i].height;\n      } else if (userTime < 3) {\n        currentTide.height = tides[0].height;\n      } else if (userTime > 3) {\n        currentTide.height = tides[23].height;\n      }\n\n      if (tides[i].timestamp != 23 && tides[i].type == \"NORMAL\" && tides[i].height > tides[i + 1]) {\n        currentTide.status = \"droping\";\n      }\n\n      if (tides[i].timestamp != 23 && tides[i].type == \"NORMAL\" && tides[i].height < tides[i + 1]) {\n        currentTide.status = \"rising\";\n      }\n\n      if (tides[i].timestamp === 17 && tides[i].type == \"NORMAL\" && tides[i].height < tides[i - 1].height) {\n        currentTide.status = \"dropping\";\n      }\n\n      if (tides[i].timestamp === 17 && tides[i].type == \"NORMAL\" && tides[i].height > tides[i - 1].height) {\n        currentTide.status = \"rising\";\n      } else if (tides[i].type === \"HIGH\") currentTide.status === \"high\";else if (tides[i].type === \"LOW\") currentTide.status === \"low\";\n    }\n\n    console.log(swellObject); // Add wind to swell object, then it is ready to send to backend\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: state.searchSpots.length > 0 ? state.searchSpots.map(spot => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"spot-results\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              cursor: \"pointer\",\n              color: \"blue\"\n            },\n            onClick: e => getSwell(e),\n            \"data-id\": spot.spotId,\n            children: [\" \", spot.name]\n          }, spot.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"no results \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n\nexport default SearchResults;","map":{"version":3,"sources":["/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/components/SearchResults.js"],"names":["React","server","useStoreContext","axios","SimpleConsoleLogger","UsingJoinColumnIsNotAllowedError","SearchResults","state","dispatch","getSwell","e","id","spotId","target","getAttribute","swell","post","tide","wind","tides","data","slice","map","date","Date","timestamp","getHours","swells","wave","winds","console","log","userTime","swellObject","surf","currentWind","currentTide","height","status","i","length","filter","sort","a","b","type","searchSpots","spot","cursor","color","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { server } from \"../config\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport axios from \"axios\";\nimport { SimpleConsoleLogger, UsingJoinColumnIsNotAllowedError } from \"typeorm\";\n\nfunction SearchResults() {\n  const [state, dispatch] = useStoreContext();\n  const getSwell = async (e) => {\n    const id = {\n      spotId: e.target.getAttribute(\"data-id\"),\n    };\n\n    //make request for surfline\n    const swell = await axios.post(`${server}/api/swells`, id);\n\n    const tide = await axios.post(`${server}/api/tides`, id);\n\n    const wind = await axios.post(`${server}/api/winds`, id);\n\n    // slice data for only today\n    // map unix time to hours\n    const tides = tide.data.data.tides.slice(0, 25).map(function (tides) {\n      let date = new Date(tides.timestamp * 1000);\n      tides.timestamp = date.getHours();\n      return tides;\n    });\n    const swells = swell.data.data.wave.slice(0, 17).map(function (wave) {\n      let date = new Date(wave.timestamp * 1000);\n      wave.timestamp = date.getHours();\n      return wave;\n    });\n\n    const winds = wind.data.data.wind.slice(0, 17).map(function (wind) {\n      let date = new Date(wind.timestamp * 1000);\n      wind.timestamp = date.getHours();\n      return wind;\n    });\n\n    console.log(\"winds\", winds);\n    console.log(\"swells\", swells);\n    console.log(\"tides\", tides);\n\n    // get the users time\n    let userTime = new Date().getHours();\n\n    let swellObject = {\n      swells: [],\n      surf: {},\n      currentWind: {},\n      currentTide: {\n        height: 0,\n        status: \"null\",\n      },\n    };\n\n    for (let i = 0; i < swells.length; i++) {\n      if (userTime === swells[i].timestamp) {\n        swellObject.swells = swells[i].swells.filter(\n          (swell) => swell.height !== 0\n        );\n        swellObject.surf = swells[i].surf;\n      } else if (userTime > 16) {\n        swellObject.swells = swells[16].swells.filter(\n          (swell) => swell.height !== 0\n        );\n\n        swellObject.surf = swells[16].surf;\n      } else if (userTime < 3) {\n        swellObject.swells = swells[0].swells.filter(\n          (swell) => swell.height !== 0\n        );\n\n        swellObject.surf = swells[0].surf;\n      }\n\n      swellObject.swells.sort((a, b) => b.height - a.height);\n    }\n\n    for (let i = 0; i < winds.length; i++) {\n      if (userTime === winds[i].timestamp) {\n        swellObject.currentWind = winds[i];\n      } else if (userTime > 16) {\n        swellObject.currentWind = winds[16];\n\n        swellObject.currentWind = winds[16];\n      } else if (userTime < 3) {\n        swellObject.currentWind = winds[0];\n      }\n    }\n\n    let { currentTide } = swellObject;\n\n    // FIX TIDE BUG TO REFLECT HIGH OR LOW TIDE WHEN TIMESTAMPS MATCH\n    for (let i = 0; i < tides.length; i++) {\n      if (userTime === tides[i].timestamp) {\n        currentTide.height = tides[i].height;\n      } else if (userTime < 3) {\n        currentTide.height = tides[0].height;\n      } else if (userTime > 3) {\n        currentTide.height = tides[23].height;\n      }\n\n      if (\n        tides[i].timestamp != 23 &&\n        tides[i].type == \"NORMAL\" &&\n        tides[i].height > tides[i + 1]\n      ) {\n        currentTide.status = \"droping\";\n      }\n      if (\n        tides[i].timestamp != 23 &&\n        tides[i].type == \"NORMAL\" &&\n        tides[i].height < tides[i + 1]\n      ) {\n        currentTide.status = \"rising\";\n      }\n      if (\n        tides[i].timestamp === 17 &&\n        tides[i].type == \"NORMAL\" &&\n        tides[i].height < tides[i - 1].height\n      ) {\n        currentTide.status = \"dropping\";\n      }\n      if (\n        tides[i].timestamp === 17 &&\n        tides[i].type == \"NORMAL\" &&\n        tides[i].height > tides[i - 1].height\n      ) {\n        currentTide.status = \"rising\";\n      } else if (tides[i].type === \"HIGH\") currentTide.status === \"high\";\n      else if (tides[i].type === \"LOW\") currentTide.status === \"low\";\n    }\n\n    console.log(swellObject);\n\n    // Add wind to swell object, then it is ready to send to backend\n  };\n  return (\n    <div>\n      {state.searchSpots.length > 0 ? (\n        state.searchSpots.map((spot) => {\n          return (\n            <div>\n              <p className=\"spot-results\">\n                {\" \"}\n                <span\n                  key={spot.name}\n                  style={{ cursor: \"pointer\", color: \"blue\" }}\n                  onClick={(e) => getSwell(e)}\n                  data-id={spot.spotId}\n                >\n                  {\" \"}\n                  {spot.name}\n                </span>\n              </p>{\" \"}\n            </div>\n          );\n        })\n      ) : (\n        <div>\n          <br />\n          <p>no results </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SearchResults;\n"]},"metadata":{},"sourceType":"module"}