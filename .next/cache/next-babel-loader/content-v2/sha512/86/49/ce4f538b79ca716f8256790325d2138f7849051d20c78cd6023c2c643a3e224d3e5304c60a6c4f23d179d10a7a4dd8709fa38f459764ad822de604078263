{"ast":null,"code":"import _asyncToGenerator from \"/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/components/ImageUploader.js\",\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport \"react-dropzone-uploader/dist/styles.css\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport S3 from \"../lib/AWS\";\nimport axios from \"axios\";\nimport { useStoreContext } from \"../utils/GlobalState\"; // get image from uploader\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImageUploader() {\n  _s();\n\n  var _useStoreContext = useStoreContext(),\n      _useStoreContext2 = _slicedToArray(_useStoreContext, 2),\n      state = _useStoreContext2[0],\n      dispatch = _useStoreContext2[1];\n\n  var handleChangeStatus = function handleChangeStatus(_ref, status) {\n    var meta = _ref.meta,\n        remove = _ref.remove;\n    console.log(status, meta);\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(files) {\n      var f, response, result, fileName, params, signedURL;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              f = files[0];\n              console.log(f[\"file\"]); // * GET request: presigned URL\n\n              _context.next = 4;\n              return axios.get(process.env.NEXT_PUBLIC_API_ENDPOINT);\n\n            case 4:\n              response = _context.sent;\n              console.log(\"Response: \", response); // store the photo in s3 bucket\n\n              _context.next = 8;\n              return fetch(response.data.uploadURL, {\n                method: \"PUT\",\n                headers: {\n                  ContentType: \"image/jpeg, image/png, image/heic, mov/mp4\"\n                },\n                body: f[\"file\"]\n              });\n\n            case 8:\n              result = _context.sent;\n              console.log(\"Result: \", result);\n              fileName = response.data.Key;\n              params = {\n                Bucket: \"swell-clutch\",\n                Key: fileName,\n                Expires: 604800\n              }; // get signed URL\n\n              _context.next = 14;\n              return S3.getSignedUrl(\"getObject\", params);\n\n            case 14:\n              signedURL = _context.sent;\n              console.log(\"url\", signedURL); //store key and url in global state\n\n              dis;\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Dropzone, {\n    onChangeStatus: handleChangeStatus,\n    onSubmit: handleSubmit,\n    hello: true,\n    maxFiles: 1,\n    multiple: false,\n    canCancel: false,\n    inputContent: \"Add A Photo\",\n    styles: {\n      dropzone: {\n        width: 200,\n        height: 10\n      },\n      dropzoneActive: {\n        borderColor: \"green\"\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ImageUploader, \"qZ9GHftpIX86+oMFVfpp6r+956w=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ImageUploader;\nexport default ImageUploader;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"sources":["/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/components/ImageUploader.js"],"names":["Dropzone","S3","axios","useStoreContext","ImageUploader","state","dispatch","handleChangeStatus","status","meta","remove","console","log","handleSubmit","files","f","get","process","env","NEXT_PUBLIC_API_ENDPOINT","response","fetch","data","uploadURL","method","headers","ContentType","body","result","fileName","Key","params","Bucket","Expires","getSignedUrl","signedURL","dis","dropzone","width","height","dropzoneActive","borderColor"],"mappings":";;;;;;;AAAA,OAAO,yCAAP;AACA,OAAOA,QAAP,MAAqB,yBAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,sBAAhC,C,CAEA;;;;AACA,SAASC,aAAT,GAAyB;AAAA;;AACvB,yBAA0BD,eAAe,EAAzC;AAAA;AAAA,MAAOE,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAAmBC,MAAnB,EAA8B;AAAA,QAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,QAArBC,MAAqB,QAArBA,MAAqB;AACvDC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoBC,IAApB;AACD,GAFD;;AAGA,MAAMI,YAAY;AAAA,yEAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,cAAAA,CADa,GACTD,KAAK,CAAC,CAAD,CADI;AAEnBH,cAAAA,OAAO,CAACC,GAAR,CAAYG,CAAC,CAAC,MAAD,CAAb,EAFmB,CAInB;;AAJmB;AAAA,qBAKIb,KAAK,CAACc,GAAN,CAAUC,OAAO,CAACC,GAAR,CAAYC,wBAAtB,CALJ;;AAAA;AAKbC,cAAAA,QALa;AAOnBT,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BQ,QAA1B,EAPmB,CASnB;;AATmB;AAAA,qBAUEC,KAAK,CAACD,QAAQ,CAACE,IAAT,CAAcC,SAAf,EAA0B;AAClDC,gBAAAA,MAAM,EAAE,KAD0C;AAElDC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,WAAW,EAAE;AADN,iBAFyC;AAKlDC,gBAAAA,IAAI,EAAEZ,CAAC,CAAC,MAAD;AAL2C,eAA1B,CAVP;;AAAA;AAUba,cAAAA,MAVa;AAiBnBjB,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBgB,MAAxB;AAEMC,cAAAA,QAnBa,GAmBFT,QAAQ,CAACE,IAAT,CAAcQ,GAnBZ;AAqBbC,cAAAA,MArBa,GAqBJ;AACbC,gBAAAA,MAAM,EAAE,cADK;AAEbF,gBAAAA,GAAG,EAAED,QAFQ;AAGbI,gBAAAA,OAAO,EAAE;AAHI,eArBI,EA2BnB;;AA3BmB;AAAA,qBA4BKhC,EAAE,CAACiC,YAAH,CAAgB,WAAhB,EAA6BH,MAA7B,CA5BL;;AAAA;AA4BbI,cAAAA,SA5Ba;AA8BnBxB,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBuB,SAAnB,EA9BmB,CAgCnB;;AAEAC,cAAAA,GAAG;;AAlCgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZvB,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAqCA,sBACE,QAAC,QAAD;AACE,IAAA,cAAc,EAAEN,kBADlB;AAEE,IAAA,QAAQ,EAAEM,YAFZ;AAGE,IAAA,KAAK,MAHP;AAIE,IAAA,QAAQ,EAAE,CAJZ;AAKE,IAAA,QAAQ,EAAE,KALZ;AAME,IAAA,SAAS,EAAE,KANb;AAOE,IAAA,YAAY,EAAC,aAPf;AAQE,IAAA,MAAM,EAAE;AACNwB,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,MAAM,EAAE;AAAtB,OADJ;AAENC,MAAAA,cAAc,EAAE;AAAEC,QAAAA,WAAW,EAAE;AAAf;AAFV;AARV;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAzDQrC,a;UACmBD,e;;;KADnBC,a;AA2DT,eAAeA,aAAf","sourcesContent":["import \"react-dropzone-uploader/dist/styles.css\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport S3 from \"../lib/AWS\";\nimport axios from \"axios\";\nimport { useStoreContext } from \"../utils/GlobalState\";\n\n// get image from uploader\nfunction ImageUploader() {\n  const [state, dispatch] = useStoreContext();\n  const handleChangeStatus = ({ meta, remove }, status) => {\n    console.log(status, meta);\n  };\n  const handleSubmit = async (files) => {\n    const f = files[0];\n    console.log(f[\"file\"]);\n\n    // * GET request: presigned URL\n    const response = await axios.get(process.env.NEXT_PUBLIC_API_ENDPOINT);\n\n    console.log(\"Response: \", response);\n\n    // store the photo in s3 bucket\n    const result = await fetch(response.data.uploadURL, {\n      method: \"PUT\",\n      headers: {\n        ContentType: \"image/jpeg, image/png, image/heic, mov/mp4\",\n      },\n      body: f[\"file\"],\n    });\n    console.log(\"Result: \", result);\n\n    const fileName = response.data.Key;\n\n    const params = {\n      Bucket: \"swell-clutch\",\n      Key: fileName,\n      Expires: 604800,\n    };\n\n    // get signed URL\n    const signedURL = await S3.getSignedUrl(\"getObject\", params);\n\n    console.log(\"url\", signedURL);\n\n    //store key and url in global state\n\n    dis;\n  };\n\n  return (\n    <Dropzone\n      onChangeStatus={handleChangeStatus}\n      onSubmit={handleSubmit}\n      hello\n      maxFiles={1}\n      multiple={false}\n      canCancel={false}\n      inputContent=\"Add A Photo\"\n      styles={{\n        dropzone: { width: 200, height: 10 },\n        dropzoneActive: { borderColor: \"green\" },\n      }}\n    />\n  );\n}\n\nexport default ImageUploader;\n"]},"metadata":{},"sourceType":"module"}