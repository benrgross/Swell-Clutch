{"ast":null,"code":"import _asyncToGenerator from \"/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/components/SearchResults.js\",\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { server } from \"../config\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport axios from \"axios\";\nimport { CURRENT_SWELL } from \"../utils/Actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchResults() {\n  _s();\n\n  var _this = this;\n\n  var _useStoreContext = useStoreContext(),\n      _useStoreContext2 = _slicedToArray(_useStoreContext, 2),\n      state = _useStoreContext2[0],\n      dispatch = _useStoreContext2[1];\n\n  var getSwell = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var id, spotName, swell, tide, wind, tides, swells, winds, userTime, swellObject, i, _i, currentTide, _i2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = {\n                spotId: e.target.getAttribute(\"data-id\")\n              };\n              spotName = e.target.textContent;\n              console.log(\"spotName\", spotName); //make request for surfline\n\n              _context.next = 5;\n              return axios.post(\"\".concat(server, \"/api/swells\"), id);\n\n            case 5:\n              swell = _context.sent;\n              _context.next = 8;\n              return axios.post(\"\".concat(server, \"/api/tides\"), id);\n\n            case 8:\n              tide = _context.sent;\n              _context.next = 11;\n              return axios.post(\"\".concat(server, \"/api/winds\"), id);\n\n            case 11:\n              wind = _context.sent;\n              // slice data for only today\n              // map unix time to hours\n              tides = tide.data.data.tides.slice(0, 25).map(function (tides) {\n                var date = new Date(tides.timestamp * 1000);\n                tides.timestamp = date.getHours();\n                return tides;\n              });\n              swells = swell.data.data.wave.slice(0, 17).map(function (wave) {\n                var date = new Date(wave.timestamp * 1000);\n                wave.timestamp = date.getHours();\n                return wave;\n              });\n              winds = wind.data.data.wind.slice(0, 17).map(function (wind) {\n                var date = new Date(wind.timestamp * 1000);\n                wind.timestamp = date.getHours();\n                return wind;\n              });\n              console.log(\"winds\", winds);\n              console.log(\"swells\", swells);\n              console.log(\"tides\", tides); // get the users time\n\n              userTime = new Date().getHours();\n              swellObject = {\n                spotId: id.spotId,\n                spotName: spotName,\n                swells: [],\n                surf: {},\n                currentWind: {},\n                currentTide: {\n                  height: 0,\n                  status: \"null\"\n                }\n              }; // match the swell info gor the user current time\n\n              for (i = 0; i < swells.length; i++) {\n                if (userTime === swells[i].timestamp) {\n                  swellObject.swells = swells[i].swells.filter(function (swell) {\n                    return swell.height !== 0;\n                  });\n                  swellObject.surf = swells[i].surf;\n                } else if (userTime > 16) {\n                  swellObject.swells = swells[16].swells.filter(function (swell) {\n                    return swell.height !== 0;\n                  });\n                  swellObject.surf = swells[16].surf;\n                } else if (userTime < 3) {\n                  swellObject.swells = swells[0].swells.filter(function (swell) {\n                    return swell.height !== 0;\n                  });\n                  swellObject.surf = swells[0].surf;\n                }\n\n                swellObject.swells.sort(function (a, b) {\n                  return b.height - a.height;\n                });\n              } // mach the wind info to the users current time\n\n\n              for (_i = 0; _i < winds.length; _i++) {\n                if (userTime === winds[_i].timestamp) {\n                  swellObject.currentWind = winds[_i];\n                } else if (userTime > 16) {\n                  swellObject.currentWind = winds[16];\n                  swellObject.currentWind = winds[16];\n                } else if (userTime < 3) {\n                  swellObject.currentWind = winds[0];\n                }\n              }\n\n              currentTide = swellObject.currentTide; // FIX TIDE BUG TO REFLECT HIGH OR LOW TIDE WHEN TIMESTAMPS MATCH\n\n              for (_i2 = 0; _i2 < tides.length; _i2++) {\n                if (userTime === tides[_i2].timestamp) {\n                  currentTide.height = tides[_i2].height;\n                } else if (userTime < 3) {\n                  currentTide.height = tides[0].height;\n                } else if (userTime > 3) {\n                  currentTide.height = tides[23].height;\n                }\n\n                if (tides[_i2].timestamp != 23 && tides[_i2].type == \"NORMAL\" && tides[_i2].height > tides[_i2 + 1]) {\n                  currentTide.status = \"droping\";\n                }\n\n                if (tides[_i2].timestamp != 23 && tides[_i2].type == \"NORMAL\" && tides[_i2].height < tides[_i2 + 1]) {\n                  currentTide.status = \"rising\";\n                }\n\n                if (tides[_i2].timestamp === 17 && tides[_i2].type == \"NORMAL\" && tides[_i2].height < tides[_i2 - 1].height) {\n                  currentTide.status = \"dropping\";\n                }\n\n                if (tides[_i2].timestamp === 17 && tides[_i2].type == \"NORMAL\" && tides[_i2].height > tides[_i2 - 1].height) {\n                  currentTide.status = \"rising\";\n                } else if (tides[_i2].type === \"HIGH\") currentTide.status === \"high\";else if (tides[_i2].type === \"LOW\") currentTide.status === \"low\";\n              }\n\n              dispatch({\n                type: CURRENT_SWELL,\n                swellObject: swellObject\n              });\n              console.log(swellObject); // Add wind to swell object, then it is ready to send to backend\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getSwell(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: state.searchSpots.length > 0 ? state.searchSpots.map(function (spot) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"spot-results\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/Swell\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: \"pointer\",\n                color: \"blue\"\n              },\n              onClick: function onClick(e) {\n                return getSwell(e);\n              },\n              \"data-id\": spot.spotId,\n              children: [\" \", spot.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 15\n        }, _this), \" \"]\n      }, spot.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, _this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"no results \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchResults, \"qZ9GHftpIX86+oMFVfpp6r+956w=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = SearchResults;\nexport default SearchResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"sources":["/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/components/SearchResults.js"],"names":["React","Link","server","useStoreContext","axios","CURRENT_SWELL","SearchResults","state","dispatch","getSwell","e","id","spotId","target","getAttribute","spotName","textContent","console","log","post","swell","tide","wind","tides","data","slice","map","date","Date","timestamp","getHours","swells","wave","winds","userTime","swellObject","surf","currentWind","currentTide","height","status","i","length","filter","sort","a","b","type","searchSpots","spot","cursor","color","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Link from \"next/link\";\nimport { server } from \"../config\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport axios from \"axios\";\nimport { CURRENT_SWELL } from \"../utils/Actions\";\n\nfunction SearchResults() {\n  const [state, dispatch] = useStoreContext();\n  const getSwell = async (e) => {\n    const id = {\n      spotId: e.target.getAttribute(\"data-id\"),\n    };\n\n    const spotName = e.target.textContent;\n    console.log(\"spotName\", spotName);\n\n    //make request for surfline\n    const swell = await axios.post(`${server}/api/swells`, id);\n\n    const tide = await axios.post(`${server}/api/tides`, id);\n\n    const wind = await axios.post(`${server}/api/winds`, id);\n\n    // slice data for only today\n    // map unix time to hours\n    const tides = tide.data.data.tides.slice(0, 25).map(function (tides) {\n      let date = new Date(tides.timestamp * 1000);\n      tides.timestamp = date.getHours();\n      return tides;\n    });\n    const swells = swell.data.data.wave.slice(0, 17).map(function (wave) {\n      let date = new Date(wave.timestamp * 1000);\n      wave.timestamp = date.getHours();\n      return wave;\n    });\n\n    const winds = wind.data.data.wind.slice(0, 17).map(function (wind) {\n      let date = new Date(wind.timestamp * 1000);\n      wind.timestamp = date.getHours();\n      return wind;\n    });\n\n    console.log(\"winds\", winds);\n    console.log(\"swells\", swells);\n    console.log(\"tides\", tides);\n\n    // get the users time\n    let userTime = new Date().getHours();\n\n    let swellObject = {\n      spotId: id.spotId,\n      spotName: spotName,\n      swells: [],\n      surf: {},\n      currentWind: {},\n      currentTide: {\n        height: 0,\n        status: \"null\",\n      },\n    };\n\n    // match the swell info gor the user current time\n    for (let i = 0; i < swells.length; i++) {\n      if (userTime === swells[i].timestamp) {\n        swellObject.swells = swells[i].swells.filter(\n          (swell) => swell.height !== 0\n        );\n        swellObject.surf = swells[i].surf;\n      } else if (userTime > 16) {\n        swellObject.swells = swells[16].swells.filter(\n          (swell) => swell.height !== 0\n        );\n\n        swellObject.surf = swells[16].surf;\n      } else if (userTime < 3) {\n        swellObject.swells = swells[0].swells.filter(\n          (swell) => swell.height !== 0\n        );\n\n        swellObject.surf = swells[0].surf;\n      }\n\n      swellObject.swells.sort((a, b) => b.height - a.height);\n    }\n\n    // mach the wind info to the users current time\n    for (let i = 0; i < winds.length; i++) {\n      if (userTime === winds[i].timestamp) {\n        swellObject.currentWind = winds[i];\n      } else if (userTime > 16) {\n        swellObject.currentWind = winds[16];\n\n        swellObject.currentWind = winds[16];\n      } else if (userTime < 3) {\n        swellObject.currentWind = winds[0];\n      }\n    }\n\n    let { currentTide } = swellObject;\n\n    // FIX TIDE BUG TO REFLECT HIGH OR LOW TIDE WHEN TIMESTAMPS MATCH\n    for (let i = 0; i < tides.length; i++) {\n      if (userTime === tides[i].timestamp) {\n        currentTide.height = tides[i].height;\n      } else if (userTime < 3) {\n        currentTide.height = tides[0].height;\n      } else if (userTime > 3) {\n        currentTide.height = tides[23].height;\n      }\n\n      if (\n        tides[i].timestamp != 23 &&\n        tides[i].type == \"NORMAL\" &&\n        tides[i].height > tides[i + 1]\n      ) {\n        currentTide.status = \"droping\";\n      }\n      if (\n        tides[i].timestamp != 23 &&\n        tides[i].type == \"NORMAL\" &&\n        tides[i].height < tides[i + 1]\n      ) {\n        currentTide.status = \"rising\";\n      }\n      if (\n        tides[i].timestamp === 17 &&\n        tides[i].type == \"NORMAL\" &&\n        tides[i].height < tides[i - 1].height\n      ) {\n        currentTide.status = \"dropping\";\n      }\n      if (\n        tides[i].timestamp === 17 &&\n        tides[i].type == \"NORMAL\" &&\n        tides[i].height > tides[i - 1].height\n      ) {\n        currentTide.status = \"rising\";\n      } else if (tides[i].type === \"HIGH\") currentTide.status === \"high\";\n      else if (tides[i].type === \"LOW\") currentTide.status === \"low\";\n    }\n\n    dispatch({\n      type: CURRENT_SWELL,\n      swellObject: swellObject,\n    });\n    console.log(swellObject);\n\n    // Add wind to swell object, then it is ready to send to backend\n  };\n  return (\n    <div>\n      {state.searchSpots.length > 0 ? (\n        state.searchSpots.map((spot) => {\n          return (\n            <div key={spot.name}>\n              <p className=\"spot-results\">\n                {\" \"}\n                <Link href=\"/Swell\">\n                  <span\n                    style={{ cursor: \"pointer\", color: \"blue\" }}\n                    onClick={(e) => getSwell(e)}\n                    data-id={spot.spotId}\n                  >\n                    {\" \"}\n                    {spot.name}\n                  </span>\n                </Link>\n              </p>{\" \"}\n            </div>\n          );\n        })\n      ) : (\n        <div>\n          <br />\n          <p>no results </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SearchResults;\n"]},"metadata":{},"sourceType":"module"}