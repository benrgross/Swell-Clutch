{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport prisma from \"../../../lib/prisma\";\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport { PrismaClient } from \"@prisma/client\";\nconst options = {\n  providers: [Providers.GitHub({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET\n  }), Providers.Email({\n    server: {\n      host: process.env.EMAIL_SERVER_HOST,\n      port: process.env.EMAIL_SERVER_PORT,\n      auth: {\n        user: process.env.EMAIL_SERVER_USER,\n        pass: process.env.EMAIL_SERVER_PASSWORD\n      }\n    },\n    from: process.env.EMAIL_FROM\n  }), Providers.Auth0({\n    clientId: process.env.AUTH0_CLIENT_ID,\n    clientSecret: process.env.AUTH0_CLIENT_SECRET,\n    domain: process.env.AUTH0_DOMAIN,\n    // redirectUri:\n    //   process.env.NEXT_PUBLIC_REDIRECT_URI ||\n    //   \"http://localhost:4000/api/auth/callback/0auth\",\n    // postLogoutRedirectUri:\n    //   process.env.NEXT_PUBLIC_POST_LOGOUT_REDIRECT_URI ||\n    //   \"http://localhost:3000/\",\n    session: {\n      // The secret used to encrypt the cookie.\n      cookieSecret: process.env.COOKIE_SECRET,\n      // The cookie lifetime (expiration) in seconds. Set to 8 hours by default.\n      cookieLifetime: 0,\n      // (Optional) Store the id_token in the session. Defaults to false.\n      storeIdToken: false,\n      // (Optional) Store the access_token in the session. Defaults to false.\n      storeAccessToken: false,\n      // (Optional) Store the refresh_token in the session. Defaults to false.\n      storeRefreshToken: false\n    }\n  })],\n  database: {\n    type: \"postgres\",\n    database: \"surfclutch\",\n    synchronize: true\n  },\n  events: {\n    async signIn(message) {\n      /* on successful sign in */\n    },\n\n    async signOut(message) {\n      /* on signout */\n    },\n\n    async createUser(message) {\n      /* user created */\n    },\n\n    async updateUser(message) {\n      /* user updated - e.g. their email was verified */\n    },\n\n    async linkAccount(message) {\n      /* account (e.g. Twitter) linked to a user */\n    },\n\n    async session(message) {\n      /* session is active */\n    },\n\n    async error(message) {\n      /* error in authentication flow */\n    }\n\n  },\n  adapter: PrismaAdapter(prisma),\n  callbacks: {\n    session: async (session, user) => {\n      session.id = user.id;\n      return Promise.resolve(session);\n    }\n  }\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["/Users/bengross/Desktop/Swell Clutch/Swell-Clutch/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","prisma","PrismaAdapter","PrismaClient","options","providers","GitHub","clientId","process","env","GITHUB_ID","clientSecret","GITHUB_SECRET","Email","server","host","EMAIL_SERVER_HOST","port","EMAIL_SERVER_PORT","auth","user","EMAIL_SERVER_USER","pass","EMAIL_SERVER_PASSWORD","from","EMAIL_FROM","Auth0","AUTH0_CLIENT_ID","AUTH0_CLIENT_SECRET","domain","AUTH0_DOMAIN","session","cookieSecret","COOKIE_SECRET","cookieLifetime","storeIdToken","storeAccessToken","storeRefreshToken","database","type","synchronize","events","signIn","message","signOut","createUser","updateUser","linkAccount","error","adapter","callbacks","id","Promise","resolve","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,CACTL,SAAS,CAACM,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFX,GAAjB,CADS,EAKTZ,SAAS,CAACa,KAAV,CAAgB;AACdC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEP,OAAO,CAACC,GAAR,CAAYO,iBADZ;AAENC,MAAAA,IAAI,EAAET,OAAO,CAACC,GAAR,CAAYS,iBAFZ;AAGNC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEZ,OAAO,CAACC,GAAR,CAAYY,iBADd;AAEJC,QAAAA,IAAI,EAAEd,OAAO,CAACC,GAAR,CAAYc;AAFd;AAHA,KADM;AASdC,IAAAA,IAAI,EAAEhB,OAAO,CAACC,GAAR,CAAYgB;AATJ,GAAhB,CALS,EAgBTzB,SAAS,CAAC0B,KAAV,CAAgB;AACdnB,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYkB,eADR;AAEdhB,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYmB,mBAFZ;AAGdC,IAAAA,MAAM,EAAErB,OAAO,CAACC,GAAR,CAAYqB,YAHN;AAKd;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,OAAO,EAAE;AACP;AACAC,MAAAA,YAAY,EAAExB,OAAO,CAACC,GAAR,CAAYwB,aAFnB;AAGP;AACAC,MAAAA,cAAc,EAAE,CAJT;AAKP;AACAC,MAAAA,YAAY,EAAE,KANP;AAOP;AACAC,MAAAA,gBAAgB,EAAE,KARX;AASP;AACAC,MAAAA,iBAAiB,EAAE;AAVZ;AAXK,GAAhB,CAhBS,CADG;AA0CdC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE,UADE;AAERD,IAAAA,QAAQ,EAAE,YAFF;AAGRE,IAAAA,WAAW,EAAE;AAHL,GA1CI;AAgDdC,EAAAA,MAAM,EAAE;AACN,UAAMC,MAAN,CAAaC,OAAb,EAAsB;AACpB;AACD,KAHK;;AAIN,UAAMC,OAAN,CAAcD,OAAd,EAAuB;AACrB;AACD,KANK;;AAON,UAAME,UAAN,CAAiBF,OAAjB,EAA0B;AACxB;AACD,KATK;;AAUN,UAAMG,UAAN,CAAiBH,OAAjB,EAA0B;AACxB;AACD,KAZK;;AAaN,UAAMI,WAAN,CAAkBJ,OAAlB,EAA2B;AACzB;AACD,KAfK;;AAgBN,UAAMZ,OAAN,CAAcY,OAAd,EAAuB;AACrB;AACD,KAlBK;;AAmBN,UAAMK,KAAN,CAAYL,OAAZ,EAAqB;AACnB;AACD;;AArBK,GAhDM;AAuEdM,EAAAA,OAAO,EAAE/C,aAAa,CAACD,MAAD,CAvER;AAwEdiD,EAAAA,SAAS,EAAE;AACTnB,IAAAA,OAAO,EAAE,OAAOA,OAAP,EAAgBX,IAAhB,KAAyB;AAChCW,MAAAA,OAAO,CAACoB,EAAR,GAAa/B,IAAI,CAAC+B,EAAlB;AACA,aAAOC,OAAO,CAACC,OAAR,CAAgBtB,OAAhB,CAAP;AACD;AAJQ;AAxEG,CAAhB;AAgFA,gBAAe,CAACuB,GAAD,EAAMC,GAAN,KAAcxD,QAAQ,CAACuD,GAAD,EAAMC,GAAN,EAAWnD,OAAX,CAArC","sourcesContent":["import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport prisma from \"../../../lib/prisma\";\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst options = {\n  providers: [\n    Providers.GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    Providers.Email({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST,\n        port: process.env.EMAIL_SERVER_PORT,\n        auth: {\n          user: process.env.EMAIL_SERVER_USER,\n          pass: process.env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: process.env.EMAIL_FROM,\n    }),\n    Providers.Auth0({\n      clientId: process.env.AUTH0_CLIENT_ID,\n      clientSecret: process.env.AUTH0_CLIENT_SECRET,\n      domain: process.env.AUTH0_DOMAIN,\n\n      // redirectUri:\n      //   process.env.NEXT_PUBLIC_REDIRECT_URI ||\n      //   \"http://localhost:4000/api/auth/callback/0auth\",\n      // postLogoutRedirectUri:\n      //   process.env.NEXT_PUBLIC_POST_LOGOUT_REDIRECT_URI ||\n      //   \"http://localhost:3000/\",\n      session: {\n        // The secret used to encrypt the cookie.\n        cookieSecret: process.env.COOKIE_SECRET,\n        // The cookie lifetime (expiration) in seconds. Set to 8 hours by default.\n        cookieLifetime: 0,\n        // (Optional) Store the id_token in the session. Defaults to false.\n        storeIdToken: false,\n        // (Optional) Store the access_token in the session. Defaults to false.\n        storeAccessToken: false,\n        // (Optional) Store the refresh_token in the session. Defaults to false.\n        storeRefreshToken: false,\n      },\n    }),\n  ],\n  database: {\n    type: \"postgres\",\n    database: \"surfclutch\",\n    synchronize: true,\n  },\n\n  events: {\n    async signIn(message) {\n      /* on successful sign in */\n    },\n    async signOut(message) {\n      /* on signout */\n    },\n    async createUser(message) {\n      /* user created */\n    },\n    async updateUser(message) {\n      /* user updated - e.g. their email was verified */\n    },\n    async linkAccount(message) {\n      /* account (e.g. Twitter) linked to a user */\n    },\n    async session(message) {\n      /* session is active */\n    },\n    async error(message) {\n      /* error in authentication flow */\n    },\n  },\n  adapter: PrismaAdapter(prisma),\n  callbacks: {\n    session: async (session, user) => {\n      session.id = user.id;\n      return Promise.resolve(session);\n    },\n  },\n};\n\nexport default (req, res) => NextAuth(req, res, options);\n"]},"metadata":{},"sourceType":"module"}